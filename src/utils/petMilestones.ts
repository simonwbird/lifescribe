import { Pet } from '@/lib/petTypes'
import { PetMilestone } from '@/lib/petMilestoneTypes'

/**
 * Calculate age from date of birth
 */
export function calculateAge(dateOfBirth: string | undefined): string | null {
  if (!dateOfBirth) return null
  
  const dob = new Date(dateOfBirth)
  const today = new Date()
  const years = today.getFullYear() - dob.getFullYear()
  const months = today.getMonth() - dob.getMonth()
  
  if (years === 0 && months === 0) {
    const days = today.getDate() - dob.getDate()
    return days === 0 ? 'Today!' : `${days} day${days === 1 ? '' : 's'}`
  }
  
  if (years === 0) {
    return `${months} month${months === 1 ? '' : 's'}`
  }
  
  if (months < 0 || (months === 0 && today.getDate() < dob.getDate())) {
    return `${years - 1} year${years - 1 === 1 ? '' : 's'}`
  }
  
  return `${years} year${years === 1 ? '' : 's'}`
}

/**
 * Calculate next anniversary date
 */
export function getNextAnniversary(date: string | undefined): Date | null {
  if (!date) return null
  
  const eventDate = new Date(date)
  const today = new Date()
  const thisYear = today.getFullYear()
  
  // Create anniversary for this year
  let anniversary = new Date(thisYear, eventDate.getMonth(), eventDate.getDate())
  
  // If this year's anniversary has passed, use next year
  if (anniversary < today) {
    anniversary = new Date(thisYear + 1, eventDate.getMonth(), eventDate.getDate())
  }
  
  return anniversary
}

/**
 * Calculate days until a date
 */
export function getDaysUntil(date: Date | string): number {
  const targetDate = typeof date === 'string' ? new Date(date) : date
  const today = new Date()
  today.setHours(0, 0, 0, 0)
  targetDate.setHours(0, 0, 0, 0)
  
  const diffTime = targetDate.getTime() - today.getTime()
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
  
  return diffDays
}

/**
 * Check if today is a milestone day
 */
export function isMilestoneToday(date: string): boolean {
  const milestoneDate = new Date(date)
  const today = new Date()
  
  return (
    milestoneDate.getDate() === today.getDate() &&
    milestoneDate.getMonth() === today.getMonth()
  )
}

/**
 * Generate automatic milestones for a pet
 */
export function generateAutoMilestones(pet: Pet, year: number = new Date().getFullYear()): Partial<PetMilestone>[] {
  const milestones: Partial<PetMilestone>[] = []
  
  // Birthday milestone
  if (pet.dobApprox) {
    const birthDate = new Date(pet.dobApprox)
    const age = year - birthDate.getFullYear()
    
    milestones.push({
      petId: pet.id,
      familyId: pet.familyId,
      title: `${pet.name}'s ${age}${getOrdinalSuffix(age)} Birthday`,
      date: `${year}-${String(birthDate.getMonth() + 1).padStart(2, '0')}-${String(birthDate.getDate()).padStart(2, '0')}`,
      autoGenerated: true,
      milestoneType: 'birthday',
    })
  }
  
  // Gotcha day anniversary
  if (pet.gotchaDate) {
    const gotchaDate = new Date(pet.gotchaDate)
    const years = year - gotchaDate.getFullYear()
    
    if (years > 0) {
      milestones.push({
        petId: pet.id,
        familyId: pet.familyId,
        title: `${pet.name}'s ${years}${getOrdinalSuffix(years)} Gotcha Day Anniversary`,
        date: `${year}-${String(gotchaDate.getMonth() + 1).padStart(2, '0')}-${String(gotchaDate.getDate()).padStart(2, '0')}`,
        autoGenerated: true,
        milestoneType: 'gotcha_anniversary',
      })
    }
  }
  
  return milestones
}

/**
 * Get ordinal suffix for numbers (1st, 2nd, 3rd, etc.)
 */
function getOrdinalSuffix(num: number): string {
  const j = num % 10
  const k = num % 100
  
  if (j === 1 && k !== 11) return 'st'
  if (j === 2 && k !== 12) return 'nd'
  if (j === 3 && k !== 13) return 'rd'
  return 'th'
}
