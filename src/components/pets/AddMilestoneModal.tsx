import { useState } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { useAddMilestone } from '@/hooks/usePetMilestones'
import { MILESTONE_TYPES, MilestoneType } from '@/lib/petMilestoneTypes'
import { supabase } from '@/integrations/supabase/client'
import { Calendar } from '@/components/ui/calendar'
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover'
import { CalendarIcon } from 'lucide-react'
import { format } from 'date-fns'
import { cn } from '@/lib/utils'

interface AddMilestoneModalProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  petId: string
  petName: string
}

export function AddMilestoneModal({ open, onOpenChange, petId, petName }: AddMilestoneModalProps) {
  const [title, setTitle] = useState('')
  const [date, setDate] = useState<Date>()
  const [notes, setNotes] = useState('')
  const [milestoneType, setMilestoneType] = useState<MilestoneType>('custom')
  const addMilestone = useAddMilestone()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!title || !date) return

    const { data: { user } } = await supabase.auth.getUser()
    if (!user) return

    const { data: member } = await supabase
      .from('members')
      .select('family_id')
      .eq('profile_id', user.id)
      .single()

    if (!member) return

    await addMilestone.mutateAsync({
      petId,
      familyId: member.family_id,
      title,
      date: format(date, 'yyyy-MM-dd'),
      notes: notes || undefined,
      autoGenerated: false,
      milestoneType,
      createdBy: user.id,
    })

    // Reset form
    setTitle('')
    setDate(undefined)
    setNotes('')
    setMilestoneType('custom')
    onOpenChange(false)
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Add Milestone for {petName}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="milestone-type">Type</Label>
            <Select value={milestoneType} onValueChange={(value) => setMilestoneType(value as MilestoneType)}>
              <SelectTrigger id="milestone-type">
                <SelectValue placeholder="Select type" />
              </SelectTrigger>
              <SelectContent>
                {MILESTONE_TYPES.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label htmlFor="milestone-title">Title</Label>
            <Input
              id="milestone-title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="e.g., Graduated puppy training"
              required
            />
          </div>

          <div className="space-y-2">
            <Label>Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className={cn(
                    'w-full justify-start text-left font-normal',
                    !date && 'text-muted-foreground'
                  )}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {date ? format(date, 'PPP') : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0" align="start">
                <Calendar
                  mode="single"
                  selected={date}
                  onSelect={setDate}
                  initialFocus
                  className="pointer-events-auto"
                />
              </PopoverContent>
            </Popover>
          </div>

          <div className="space-y-2">
            <Label htmlFor="milestone-notes">Notes (Optional)</Label>
            <Textarea
              id="milestone-notes"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Add any additional details..."
              rows={3}
            />
          </div>

          <div className="flex justify-end gap-2">
            <Button type="button" variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            <Button type="submit" disabled={!title || !date || addMilestone.isPending}>
              Add Milestone
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  )
}
