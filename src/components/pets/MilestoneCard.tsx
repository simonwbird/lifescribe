import { PetMilestone } from '@/lib/petMilestoneTypes'
import { Card } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Cake, Heart, Sparkles, Trash2 } from 'lucide-react'
import { format } from 'date-fns'
import { useDeleteMilestone } from '@/hooks/usePetMilestones'
import { isMilestoneToday } from '@/utils/petMilestones'
import { useConfetti } from '@/hooks/useConfetti'
import { useEffect, useState } from 'react'

interface MilestoneCardProps {
  milestone: PetMilestone
  showDelete?: boolean
}

export function MilestoneCard({ milestone, showDelete = true }: MilestoneCardProps) {
  const deleteMilestone = useDeleteMilestone()
  const { celebratePost } = useConfetti()
  const [hasTriggeredConfetti, setHasTriggeredConfetti] = useState(false)
  const isToday = isMilestoneToday(milestone.date)

  // Trigger confetti on mount if it's a milestone today
  useEffect(() => {
    if (isToday && !hasTriggeredConfetti) {
      celebratePost()
      setHasTriggeredConfetti(true)
    }
  }, [isToday, hasTriggeredConfetti, celebratePost])

  const getMilestoneIcon = () => {
    switch (milestone.milestoneType) {
      case 'birthday':
        return <Cake className="h-5 w-5 text-primary" />
      case 'gotcha_anniversary':
        return <Heart className="h-5 w-5 text-primary" />
      default:
        return <Sparkles className="h-5 w-5 text-primary" />
    }
  }

  const handleDelete = async () => {
    if (confirm('Are you sure you want to delete this milestone?')) {
      await deleteMilestone.mutateAsync(milestone.id)
    }
  }

  return (
    <Card className={cn(
      "p-4 relative",
      isToday && "border-primary bg-primary/5"
    )}>
      {isToday && (
        <div className="absolute -top-2 -right-2">
          <div className="bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full font-medium">
            Today! ðŸŽ‰
          </div>
        </div>
      )}
      
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 mt-1">
          {getMilestoneIcon()}
        </div>
        
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between gap-2">
            <div>
              <h4 className="font-medium text-foreground">{milestone.title}</h4>
              <p className="text-sm text-muted-foreground mt-1">
                {format(new Date(milestone.date), 'PPP')}
              </p>
              {milestone.notes && (
                <p className="text-sm text-muted-foreground mt-2">{milestone.notes}</p>
              )}
            </div>
            
            {showDelete && !milestone.autoGenerated && (
              <Button
                variant="ghost"
                size="sm"
                onClick={handleDelete}
                disabled={deleteMilestone.isPending}
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            )}
          </div>
        </div>
      </div>
    </Card>
  )
}

function cn(...classes: (string | boolean | undefined)[]) {
  return classes.filter(Boolean).join(' ')
}
